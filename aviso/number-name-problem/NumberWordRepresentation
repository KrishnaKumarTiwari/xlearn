{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Aviso Data Science Problem Solving Challenge"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problem #3 Coding logic Challenge \n",
    "\n",
    "### Number name"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Program should accept a number name less than 10000 and print the number\n",
    "\n",
    "Ex: One ---> 1\n",
    "Ten ----> 10\n",
    "twenty two ----> 22\n",
    "three hundred and seventy four ----> 374\n",
    "eight thousand three hundred and thirty ----> 8630\n",
    "\n",
    "b. Submission\n",
    "○ Python Program File (.py) which can be executed.\n",
    "\n",
    "c. Evaluation criteria\n",
    "○ Elegance of the programming logic. Handling of error cases, modularity of\n",
    "code, adherence to python programming standards etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def _input(message,in_type=str):\n",
    "    while True:\n",
    "        try:\n",
    "            return in_type (input(message))\n",
    "        except:pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We can restrict user input as integer using _input"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "_input(\"Only accepting integer : \",int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# collection of single digits number represenation\n",
    "single_digits_number = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \n",
    "                        \"six\", \"seven\",\"eight\", \"nine\"]; "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# collection of double digits number represenation (10-19)\n",
    "special_two_digits_number = [\"\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \n",
    "              \"sixteen\", \"seventeen\", \"eighteen\",\"nineteen\"]; "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# collection of 10's multiple\n",
    "tens_multiple = [\"\", \"\", \"twenty\", \"thirty\", \"forty\",\"fifty\", \"sixty\", \"seventy\", \"eighty\",\"ninety\"]; \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# collection of 100's multiple\n",
    "hundred_multiple = [\"hundred\", \"thousand\"];"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note keeping the range till thousand as ten thousand it out of scope of this question"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# A function that prints given number in words \n",
    "\n",
    "def display_word_represenation(num):\n",
    "    \n",
    "    try: \n",
    "        if(num is not None):\n",
    "            length = len(num); \n",
    "            if (length == 0): \n",
    "                print(\"Not a Valid Input | Invalid Number\"); \n",
    "                return; \n",
    "            if (num.isnumeric()):\n",
    "                ##check if non negative number\n",
    "                if (0 > int(num)):\n",
    "                    print(\"Not a Valid Input | Negative numbers not supported\")\n",
    "                    return;\n",
    "            else: \n",
    "                print(\"Not a Valid Input| Input value is not a Number\")\n",
    "                return;\n",
    "            if (length > 4): \n",
    "                print(\"Limitation | Number greater than 10000 not supported\"); \n",
    "                return; \n",
    "        else:\n",
    "            print(\"Please Input a Valid Input | None is not accetable\")\n",
    "\n",
    "\n",
    "        if (length == 1): \n",
    "            #ASCII value based position find \n",
    "            print(single_digits_number[ord(num[0]) - ord('0')]); \n",
    "            return; \n",
    "\n",
    "        pointer = 0; \n",
    "        while (pointer < len(num)):\n",
    "            if (length >= 3) :\n",
    "                if (ord(num[pointer]) - ord('0') != 0):\n",
    "                    print(single_digits_number[ord(num[pointer]) - ord('0')], end = \" \"); \n",
    "                    print(hundred_multiple[length - 3], end = \" \");\n",
    "                    length -= 1;\n",
    "            else : \n",
    "                if (ord(num[pointer]) - ord('0') == 1): \n",
    "                    sum = (ord(num[pointer]) - ord('0') + ord(num[pointer +1]) - ord('0')); \n",
    "                    print(special_two_digits_number[sum]);\n",
    "                    return; \n",
    "                elif (ord(num[pointer]) - ord('0') == 2 and ord(num[pointer + 1]) - ord('0') == 0): \n",
    "                    print(\"twenty\"); \n",
    "                    return;\n",
    "                else: \n",
    "                    i = ord(num[pointer]) - ord('0'); \n",
    "                    if(i > 0): \n",
    "                        print(tens_multiple[i], end = \" \"); \n",
    "                    else: \n",
    "                        print(\"\", end = \"\"); \n",
    "                    pointer += 1; \n",
    "                    if(ord(num[pointer]) - ord('0') != 0): \n",
    "                        print(single_digits_number[ord(num[pointer]) - 48]); \n",
    "            pointer += 1;\n",
    "    except Exception as e:\n",
    "        print(\"Something went wrong\") \n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Not a Valid Input| Input value is not a Number\n",
      "Limitation | Number greater than 10000 not supported\n",
      "Not a Valid Input| Input value is not a Number\n",
      "Not a Valid Input| Input value is not a Number\n",
      "Not a Valid Input| Input value is not a Number\n"
     ]
    }
   ],
   "source": [
    "## We can use unittest to define the test cases \n",
    "\n",
    "def test():    \n",
    "    display_word_represenation(\"-1\")\n",
    "    display_word_represenation(\"10000\")\n",
    "    display_word_represenation(\"10.5\")\n",
    "    display_word_represenation(\"-105\")\n",
    "    display_word_represenation(\"/u005\")\n",
    "    \n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    test()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
